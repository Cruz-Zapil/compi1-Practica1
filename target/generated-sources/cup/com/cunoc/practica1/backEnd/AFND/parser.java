
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.cunoc.practica1.backEnd.AFND;

import com.cunoc.practica1.backEnd.objetos.Grafica;
import com.cunoc.practica1.backEnd.objetos.Linea;
import com.cunoc.practica1.backEnd.objetos.Poligono;
import com.cunoc.practica1.backEnd.objetos.Rectangulo;
import com.cunoc.practica1.backEnd.objetos.animation.Animacion;
import com.cunoc.practica1.backEnd.objetos.Circulo;
import com.cunoc.practica1.backEnd.objetos.Cuadrado;
import java.awt.Color;
import java.util.HashMap;
import java.util.List;
import java.util.ArrayList;
import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\037\000\002\002\004\000\002\002\005\000\002\002" +
    "\004\000\002\002\003\000\002\002\003\000\002\002\004" +
    "\000\002\003\017\000\002\003\017\000\002\003\021\000" +
    "\002\003\021\000\002\003\023\000\002\003\015\000\002" +
    "\007\003\000\002\007\003\000\002\007\003\000\002\007" +
    "\003\000\002\007\003\000\002\007\003\000\002\007\003" +
    "\000\002\007\003\000\002\007\003\000\002\010\003\000" +
    "\002\010\003\000\002\004\005\000\002\004\005\000\002" +
    "\004\003\000\002\005\005\000\002\005\005\000\002\005" +
    "\003\000\002\006\005\000\002\006\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\162\000\012\003\007\004\004\013\005\023\011\001" +
    "\002\000\014\005\052\006\054\007\050\010\053\011\051" +
    "\001\002\000\004\035\016\001\002\000\004\002\015\001" +
    "\002\000\012\003\007\004\004\013\005\023\011\001\002" +
    "\000\006\002\ufffe\023\012\001\002\000\004\002\ufffd\001" +
    "\002\000\014\002\uffff\003\007\004\004\013\005\023\011" +
    "\001\002\000\004\002\000\001\002\000\004\002\ufffc\001" +
    "\002\000\004\002\001\001\002\000\004\015\017\001\002" +
    "\000\006\010\022\036\021\001\002\000\004\014\023\001" +
    "\002\000\004\014\uffec\001\002\000\004\014\uffeb\001\002" +
    "\000\006\015\030\037\024\001\002\000\016\014\uffe3\016" +
    "\uffe3\017\uffe3\020\uffe3\021\uffe3\022\uffe3\001\002\000\010" +
    "\014\043\017\033\020\034\001\002\000\016\014\uffe8\016" +
    "\uffe8\017\uffe8\020\uffe8\021\037\022\036\001\002\000\016" +
    "\014\uffe5\016\uffe5\017\uffe5\020\uffe5\021\uffe5\022\uffe5\001" +
    "\002\000\006\015\030\037\024\001\002\000\010\016\032" +
    "\017\033\020\034\001\002\000\016\014\uffe4\016\uffe4\017" +
    "\uffe4\020\uffe4\021\uffe4\022\uffe4\001\002\000\006\015\030" +
    "\037\024\001\002\000\006\015\030\037\024\001\002\000" +
    "\016\014\uffe9\016\uffe9\017\uffe9\020\uffe9\021\037\022\036" +
    "\001\002\000\006\015\030\037\024\001\002\000\006\015" +
    "\030\037\024\001\002\000\016\014\uffe7\016\uffe7\017\uffe7" +
    "\020\uffe7\021\uffe7\022\uffe7\001\002\000\016\014\uffe6\016" +
    "\uffe6\017\uffe6\020\uffe6\021\uffe6\022\uffe6\001\002\000\016" +
    "\014\uffea\016\uffea\017\uffea\020\uffea\021\037\022\036\001" +
    "\002\000\006\015\030\037\024\001\002\000\010\014\045" +
    "\017\033\020\034\001\002\000\006\015\030\037\024\001" +
    "\002\000\010\016\047\017\033\020\034\001\002\000\006" +
    "\002\ufff6\023\ufff6\001\002\000\004\015\150\001\002\000" +
    "\004\015\131\001\002\000\004\015\116\001\002\000\004" +
    "\015\101\001\002\000\004\015\055\001\002\000\004\012" +
    "\056\001\002\000\004\014\057\001\002\000\006\015\030" +
    "\037\024\001\002\000\010\014\061\017\033\020\034\001" +
    "\002\000\006\015\030\037\024\001\002\000\010\014\063" +
    "\017\033\020\034\001\002\000\006\015\030\037\024\001" +
    "\002\000\010\014\065\017\033\020\034\001\002\000\024" +
    "\024\076\025\073\026\071\027\075\030\066\031\077\032" +
    "\074\033\072\034\067\001\002\000\004\016\ufff1\001\002" +
    "\000\004\016\uffed\001\002\000\004\016\100\001\002\000" +
    "\004\016\ufff3\001\002\000\004\016\uffee\001\002\000\004" +
    "\016\ufff4\001\002\000\004\016\uffef\001\002\000\004\016" +
    "\ufff2\001\002\000\004\016\ufff5\001\002\000\004\016\ufff0" +
    "\001\002\000\006\002\ufffa\023\ufffa\001\002\000\004\012" +
    "\102\001\002\000\004\014\103\001\002\000\006\015\030" +
    "\037\024\001\002\000\010\014\105\017\033\020\034\001" +
    "\002\000\006\015\030\037\024\001\002\000\010\014\107" +
    "\017\033\020\034\001\002\000\006\015\030\037\024\001" +
    "\002\000\010\014\111\017\033\020\034\001\002\000\006" +
    "\015\030\037\024\001\002\000\010\014\113\017\033\020" +
    "\034\001\002\000\024\024\076\025\073\026\071\027\075" +
    "\030\066\031\077\032\074\033\072\034\067\001\002\000" +
    "\004\016\115\001\002\000\006\002\ufff8\023\ufff8\001\002" +
    "\000\004\012\117\001\002\000\004\014\120\001\002\000" +
    "\006\015\030\037\024\001\002\000\010\014\122\017\033" +
    "\020\034\001\002\000\006\015\030\037\024\001\002\000" +
    "\010\014\124\017\033\020\034\001\002\000\006\015\030" +
    "\037\024\001\002\000\010\014\126\017\033\020\034\001" +
    "\002\000\024\024\076\025\073\026\071\027\075\030\066" +
    "\031\077\032\074\033\072\034\067\001\002\000\004\016" +
    "\130\001\002\000\006\002\ufffb\023\ufffb\001\002\000\004" +
    "\012\132\001\002\000\004\014\133\001\002\000\006\015" +
    "\030\037\024\001\002\000\010\014\135\017\033\020\034" +
    "\001\002\000\006\015\030\037\024\001\002\000\010\014" +
    "\137\017\033\020\034\001\002\000\006\015\030\037\024" +
    "\001\002\000\010\014\141\017\033\020\034\001\002\000" +
    "\006\015\030\037\024\001\002\000\010\014\143\017\033" +
    "\020\034\001\002\000\006\015\030\037\024\001\002\000" +
    "\010\014\145\017\033\020\034\001\002\000\024\024\076" +
    "\025\073\026\071\027\075\030\066\031\077\032\074\033" +
    "\072\034\067\001\002\000\004\016\147\001\002\000\006" +
    "\002\ufff7\023\ufff7\001\002\000\004\012\151\001\002\000" +
    "\004\014\152\001\002\000\006\015\030\037\024\001\002" +
    "\000\010\014\154\017\033\020\034\001\002\000\006\015" +
    "\030\037\024\001\002\000\010\014\156\017\033\020\034" +
    "\001\002\000\006\015\030\037\024\001\002\000\010\014" +
    "\160\017\033\020\034\001\002\000\006\015\030\037\024" +
    "\001\002\000\010\014\162\017\033\020\034\001\002\000" +
    "\024\024\076\025\073\026\071\027\075\030\066\031\077" +
    "\032\074\033\072\034\067\001\002\000\004\016\164\001" +
    "\002\000\006\002\ufff9\023\ufff9\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\162\000\006\002\005\003\007\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\002\013" +
    "\003\007\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\002\012\003\007\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\010" +
    "\017\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\004\024\005\025\006\026\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\004\030\005\025\006\026\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\005\041\006\026" +
    "\001\001\000\006\005\034\006\026\001\001\000\002\001" +
    "\001\000\004\006\040\001\001\000\004\006\037\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\004\043\005\025\006\026\001\001\000\002\001\001" +
    "\000\010\004\045\005\025\006\026\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\004\057\005\025" +
    "\006\026\001\001\000\002\001\001\000\010\004\061\005" +
    "\025\006\026\001\001\000\002\001\001\000\010\004\063" +
    "\005\025\006\026\001\001\000\002\001\001\000\004\007" +
    "\067\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\004\103\005\025\006\026\001\001" +
    "\000\002\001\001\000\010\004\105\005\025\006\026\001" +
    "\001\000\002\001\001\000\010\004\107\005\025\006\026" +
    "\001\001\000\002\001\001\000\010\004\111\005\025\006" +
    "\026\001\001\000\002\001\001\000\004\007\113\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\004\120\005\025\006\026\001\001" +
    "\000\002\001\001\000\010\004\122\005\025\006\026\001" +
    "\001\000\002\001\001\000\010\004\124\005\025\006\026" +
    "\001\001\000\002\001\001\000\004\007\126\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\004\133\005\025\006\026\001\001\000" +
    "\002\001\001\000\010\004\135\005\025\006\026\001\001" +
    "\000\002\001\001\000\010\004\137\005\025\006\026\001" +
    "\001\000\002\001\001\000\010\004\141\005\025\006\026" +
    "\001\001\000\002\001\001\000\010\004\143\005\025\006" +
    "\026\001\001\000\002\001\001\000\004\007\145\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\004\152\005\025\006\026\001\001" +
    "\000\002\001\001\000\010\004\154\005\025\006\026\001" +
    "\001\000\002\001\001\000\010\004\156\005\025\006\026" +
    "\001\001\000\002\001\001\000\010\004\160\005\025\006" +
    "\026\001\001\000\002\001\001\000\004\007\162\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




 /**
     * Método al que se llama automáticamente ante algún error sintactico.
     **/ 
    public void syntax_error(Symbol s){ 
        System.out.println("Error Sintáctico en la Línea " + (s.left) +
        " Columna "+s.right+ ". No se esperaba este componente: " +s.value+"."); 
        PanelReporte.agregarError(new Errores("Sintactico",(String) s.value,"no se esperaba: "+s.value, s.left, s.right));
    } 
    /**
     * Método al que se llama cuando se identifica un error sintáctico en el que 
     * ya no es posible una recuperación de errores.
     **/ 
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Error síntactico irrecuperable en la Línea " + 
        (s.left)+ " Columna "+s.right+". Componente " + s.value + " no reconocido."); 
    } 

    // grafica auxi almacenar la instruccion anteriro 
    private Grafica graficaAux;

    // Lista de gráficas
    private List<Grafica> listaGrafica = new ArrayList<>();

    // Método para obtener el HashMap de gráficos
    public List<Grafica> getListaGrafica() {
        return listaGrafica;
    }


    // reporte de operaciones matemáticas
    private List<Operadores> reporteOperaciones = new ArrayList<>();
    
    // retornar el reporte Operaciones Matematicas 
    public List<Operadores> getReporteOperacion(){
        return reporteOperaciones;
    }

   

    // reporte de número de color
    private HashMap<String, Integer> reporteColor = new HashMap<>();

    // Inicializar los contadores en 0 para cada color que deseas rastrear
    {
        reporteColor.put("AZUL", 0);
        reporteColor.put("ROJO", 0);
        reporteColor.put("AMARILLO", 0);
        reporteColor.put("VERDE", 0);
        reporteColor.put("ROSA", 0);
        reporteColor.put("NEGRO", 0);
        reporteColor.put("CELESTE", 0);
        reporteColor.put("NARANJA", 0);
        reporteColor.put("GRIS", 0);
    }
    // retornar el reporte Color 
    public HashMap<String, Integer> getReporteColor(){
        return reporteColor;
    }

    // reporte de número de figura
    private HashMap<String, Integer> reporteFigura = new HashMap<>();
    {
        reporteFigura.put("CIRCULO", 0);
        reporteFigura.put("CUADRADO", 0);
        reporteFigura.put("RECTANGULO", 0);
        reporteFigura.put("LINEA", 0);
        reporteFigura.put("POLIGONO", 0);
    }
    // retonar el reporte Figura 
    public HashMap<String, Integer> getReporteFigura(){
        return reporteFigura;
    }

    // reporte de animaciones
    private HashMap<String, Integer> reporteAnimacion = new HashMap<>();

    {
        reporteAnimacion.put("LINEA",0);
        reporteAnimacion.put("CURVA",0);
    }

    public HashMap<String, Integer> gerReporteAnimacion(){
        return reporteAnimacion;
    }





/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= instrucciones EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // instrucciones ::= instruccion NEWLINE instrucciones 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int isleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int isright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object is = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrucciones",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // instrucciones ::= instruccion NEWLINE 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrucciones",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // instrucciones ::= instruccion 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrucciones",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // instrucciones ::= NEWLINE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrucciones",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // instrucciones ::= error instrucciones 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrucciones",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // instruccion ::= GRAFICAR CIRCULO LPAREN NOMBRE COMA expre COMA expre COMA expre COMA color RPAREN 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int posxleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int posxright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Double posx = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int posyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int posyright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Double posy = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Double r = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Color c = (Color)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  reporteFigura.put("CIRCULO", reporteFigura.get("CIRCULO") +1); 
                    System.out.println(" graficar circulo ( "+ n +", "+ posx +" , "+ posy +" , "+ r + " , "+ c+ " )");

                        if (graficaAux !=null){
                            listaGrafica.add(graficaAux);  
                        }

                        graficaAux = new Circulo(n,null,posx,posy,c,r);

                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // instruccion ::= GRAFICAR CUADRADO LPAREN NOMBRE COMA expre COMA expre COMA expre COMA color RPAREN 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int posxleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int posxright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Double posx = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int posyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int posyright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Double posy = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Double l = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Color c = (Color)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  reporteFigura.put("CUADRADO", reporteFigura.get("CUADRADO") +1);
                    System.out.println(" graficar cuadrado ( "+ n +", "+ posx +" , "+ posy +" , "+ l + " , "+ c+ " )");

                        if (graficaAux !=null){
                            listaGrafica.add(graficaAux);
                         }

                        graficaAux = new Cuadrado(n,null,posx,posy,c,l);

                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // instruccion ::= GRAFICAR RECTANGULO LPAREN NOMBRE COMA expre COMA expre COMA expre COMA expre COMA color RPAREN 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int posxleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int posxright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Double posx = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int posyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int posyright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Double posy = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Double a = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int alleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int alright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Double al = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Color c = (Color)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 reporteFigura.put("RECTANGULO", reporteFigura.get("RECTANGULO") +1);
                   System.out.println(" graficar rectangulo ( "+ n +", "+ posx +" , "+ posy +" , "+ a+" , "+ al + " , "+ c+" )"); 
                
                        if (graficaAux !=null){
                            listaGrafica.add(graficaAux);
        
                         }

                        graficaAux = new Rectangulo(n,null,posx,posy,c,a,al);

                 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-14)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // instruccion ::= GRAFICAR LINEA LPAREN NOMBRE COMA expre COMA expre COMA expre COMA expre COMA color RPAREN 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int posxleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int posxright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Double posx = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int posyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int posyright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Double posy = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int posx2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int posx2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Double posx2 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int posy2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int posy2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Double posy2 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Color c = (Color)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 reporteFigura.put("LINEA", reporteFigura.get("LINEA") +1);
                   System.out.println(" graficar linea ( "+ n +", "+ posx +" , "+ posy +" , "+" , "+ posx2+" , "+ posy2+ " , "+ c+ " )");
                        if (graficaAux !=null){
                            listaGrafica.add(graficaAux);
        
                         }

                        graficaAux = new Linea(n,null,posx,posy,c,posx2,posy2);
                 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-14)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // instruccion ::= GRAFICAR POLIGONO LPAREN NOMBRE COMA expre COMA expre COMA expre COMA expre COMA expre COMA color RPAREN 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-13)).value;
		int posxleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int posxright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		Double posx = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int posyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int posyright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Double posy = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int clleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int clright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Double cl = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Double l = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Double h = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Color c = (Color)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  reporteFigura.put("POLIGONO", reporteFigura.get("POLIGONO") +1); 
                    System.out.println(" graficar poligono ( "+ n +", "+ posx +" , "+ posy +" , "+ cl + " , "+ l+" , "+h+" , "+ c +" )");
                      if (graficaAux !=null){
                            listaGrafica.add(graficaAux);
                         }
                        graficaAux = new Poligono(n,null,posx,posy,c,cl,l,h);
                 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-16)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // instruccion ::= ANIMAR OBJETO_ANTERIOR LPAREN tipo_animacion COMA expre COMA expre COMA expre RPAREN 
            {
              Object RESULT =null;
		int taleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int taright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String ta = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int dxleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int dxright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Double dx = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int dyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int dyright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Double dy = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int orleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int orright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Double or = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		

                 Animacion nuevaAnimacion = new Animacion(ta,dx,dy,or);
                    if(graficaAux!=null){
                        graficaAux.setAnimacion(nuevaAnimacion);
                        listaGrafica.add(graficaAux);
                        graficaAux= null;  
                        reporteAnimacion.put(ta,reporteAnimacion.get(ta)+1);                      
                    }else {
                        System.out.println(" no hay grafica anteriro :C");
                    };
                

                 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // color ::= AZUL 
            {
              Color RESULT =null;
		int azleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int azright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String az = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 reporteColor.put("AZUL", reporteColor.get("AZUL") + 1);  RESULT = Color.BLUE; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("color",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // color ::= ROJO 
            {
              Color RESULT =null;
		int roleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int roright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String ro = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 reporteColor.put("ROJO", reporteColor.get("ROJO") + 1); RESULT = Color.RED; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("color",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // color ::= AMARILLO 
            {
              Color RESULT =null;
		int amleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int amright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String am = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 reporteColor.put("AMARILLO", reporteColor.get("AMARILLO") + 1); RESULT = Color.YELLOW; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("color",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // color ::= VERDE 
            {
              Color RESULT =null;
		 reporteColor.put("VERDE", reporteColor.get("VERDE") + 1); RESULT =Color.GREEN;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("color",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // color ::= ROSA 
            {
              Color RESULT =null;
		 reporteColor.put("ROSA", reporteColor.get("ROSA") + 1); RESULT = Color.PINK; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("color",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // color ::= BLANCO 
            {
              Color RESULT =null;
		 reporteColor.put("BLANCO", reporteColor.get("NEGRO") + 1); RESULT = Color.WHITE; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("color",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // color ::= CELESTE 
            {
              Color RESULT =null;
		 reporteColor.put("CELESTE", reporteColor.get("CELESTE") + 1); RESULT = Color.CYAN; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("color",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // color ::= NARANJA 
            {
              Color RESULT =null;
		 reporteColor.put("NARANJA", reporteColor.get("NARANJA") + 1); RESULT = Color.ORANGE;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("color",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // color ::= GRIS 
            {
              Color RESULT =null;
		 reporteColor.put("GRIS", reporteColor.get("GRIS") + 1); RESULT = Color.GRAY;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("color",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // tipo_animacion ::= CURVA 
            {
              String RESULT =null;
		RESULT="CURVA";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_animacion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // tipo_animacion ::= LINEA 
            {
              String RESULT =null;
		RESULT="LINEA";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_animacion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expre ::= expre PLUS term 
            {
              Double RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double e1 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double e2 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                // Obtener la línea y columna del primer símbolo (e1)
                int linea = e1left;
                int columna = e1right;
               // Reporte de suma
               String operacion = e1 + " + " + e2;
               
               reporteOperaciones.add(new Operadores("Suma",linea,columna,operacion));
               RESULT = e1 + e2 ; 
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expre",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expre ::= expre MINUS term 
            {
              Double RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double e1 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double e2 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                // Obtener la línea y columna del primer símbolo (e1)
                int linea =  e1left;
                int columna =  e1right;
               // Reporte de resta
               String operacion = e1 + " - " + e2;
               reporteOperaciones.add(new Operadores("Resta",linea,columna,operacion));
               RESULT =e1 - e2 ; 
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expre",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expre ::= term 
            {
              Double RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double e = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT =  e ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expre",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // term ::= term TIMES factor 
            {
              Double RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double t = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double f = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            // Obtener la línea y columna del primer símbolo (e1)
            int linea = tleft;
            int columna = tright;
           // Reporte de multiplicación
           String operacion = t + " * " + f;
           reporteOperaciones.add( new Operadores("Multiplicación",linea,columna,operacion));
           RESULT =t * f ; 
       
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // term ::= term DIVIDE factor 
            {
              Double RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double t = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double f = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            // Obtener la línea y columna del primer símbolo (e1)
            int linea = tleft;
            int columna = tright;
           // Reporte de división
           String operacion = t + " / " + f;

           reporteOperaciones.add( new Operadores("División",linea,columna,operacion));
           RESULT = t / f ; 
       
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // term ::= factor 
            {
              Double RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double f = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                // Obtener la línea y columna del primer símbolo (n)
                int linea =  fleft;
                int columna =  fright;
                // Reporte de número
                reporteOperaciones.add(new Operadores("Factor",linea,columna,(String)f.value));
       
       
        RESULT = f; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // factor ::= LPAREN expre RPAREN 
            {
              Double RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Double e = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // factor ::= NUMERO 
            {
              Double RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Double n = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                // Obtener la línea y columna del primer símbolo (n)
                int linea = nleft;
                int columna =  nright;
                // Reporte de número
                reporteOperaciones.add(new Operadores("Número",linea,columna,(Sting)n.value));
                RESULT = n;
          RESULT = n; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
