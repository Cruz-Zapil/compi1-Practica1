package com.cunoc.practica1.backEnd.AFND;

import com.cunoc.practica1.backEnd.objetos.animation.graficas.Grafica;
import com.cunoc.practica1.backEnd.objetos.animation.graficas.Circulo;

import java.util.HashMap;
import java.util.List;
import java.util.ArrayList;

import java_cup.runtime.*;


// Definir el HashMap para almacenar las gráficas
parser code {:

 /**
     * Método al que se llama automáticamente ante algún error sintactico.
     **/ 
    public void syntax_error(Symbol s){ 
        System.out.println("Error Sintáctico en la Línea " + (s.left) +
        " Columna "+s.right+ ". No se esperaba este componente: " +s.value+"."); 
    } 
    /**
     * Método al que se llama cuando se identifica un error sintáctico en el que 
     * ya no es posible una recuperación de errores.
     **/ 
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Error síntactico irrecuperable en la Línea " + 
        (s.left)+ " Columna "+s.right+". Componente " + s.value + " no reconocido."); 
    } 

    // grafica auxi: 
    private Grafica graficaAux;


    // reporte de operaciones matemáticas
    private List<String> reporteOperaciones = new ArrayList<>();
    
    // retornar el reporte Operaciones Matematicas 
    public List<String> getReporteOperacion(){
        return reporteOperaciones;
    }

    // almacenar la instrucción de la gráfica
    private Instruction ultimaGrafica = null;

    // reporte de número de color
    private HashMap<String, Integer> reporteColor = new HashMap<>();

    // Inicializar los contadores en 0 para cada color que deseas rastrear
    {
        reporteColor.put("AZUL", 0);
        reporteColor.put("ROJO", 0);
        reporteColor.put("AMARILLO", 0);
        reporteColor.put("VERDE", 0);
        reporteColor.put("MORADO", 0);
        reporteColor.put("NEGRO", 0);
        reporteColor.put("CELESTE", 0);
        reporteColor.put("LILA", 0);
        reporteColor.put("GRIS", 0);
    }
    // retornar el reporte Color 
    public HashMap<String, Integer> getReporteColor(){
        return reporteColor;
    }

    // reporte de número de figura
    private HashMap<String, Integer> reporteFigura = new HashMap<>();
    {
        reporteFigura.put("CIRCULO", 0);
        reporteFigura.put("CUADRADO", 0);
        reporteFigura.put("RECTANGULO", 0);
        reporteFigura.put("LINEA", 0);
        reporteFigura.put("POLIGONO", 0);
    }
    // retonar el reporte Figura 
    public HashMap<String, Integer> getReporteFigura(){
        return reporteFigura;
    }

    // reporte de animaciones
    private HashMap<String, Integer> reporteAnimacion = new HashMap<>();

    {
        reporteAnimacion.put("LINEA",0);
        reporteAnimacion.put("CURVA",0);
    }

    public HashMap<String, Integer> gerReporteAnimacion(){
        return reporteAnimacion;
    }

    // reporte de error de sintaxis
    private List<String> reporteError = new ArrayList<>();

    // retornar  de errores Sintacticos

    public List<String> getReporteError(){
        return reporteError;
    }

    // Parametros de la gráfica
    private HashMap<String, List<List<String>>> graphicsMap = new HashMap<>();

    // Método para obtener el HashMap de gráficos
    public HashMap<String, List<List<String>>> getGraphicsMap() {
        return graphicsMap;
    }


:}


// Definir terminales
terminal String GRAFICAR, CIRCULO, CUADRADO, RECTANGULO, LINEA, POLIGONO, NOMBRE, ANIMAR;
terminal String COMA, LPAREN, RPAREN, PLUS, MINUS, TIMES, DIVIDE, NEWLINE;

terminal String AZUL, ROJO, AMARILLO, VERDE, MORADO, NEGRO, CELESTE, LILA, GRIS;

terminal String OBJETO_ANTERIOR, CURVA;
terminal Double NUMERO;

/// definir no terminales: 
non terminal  instrucciones, instruccion;
non terminal Double expre, term, factor;
non terminal String color;
non terminal String tipo_animacion;


start with instrucciones; 

///  Definir la gramatica: 


instrucciones ::= instruccion: i NEWLINE instrucciones: is 
                | instruccion: i NEWLINE 
                | error instrucciones;


instruccion ::= GRAFICAR CIRCULO LPAREN NOMBRE:n COMA expre:posx COMA expre:posy COMA  expre:r COMA color:c RPAREN 
{: reporteFigura.put("CIRCULO", reporteFigura.get("CIRCULO") +1); 
   System.out.println(" graficar circulo ( "+ n +", "+ posx +" , "+ posy +" , "+ r + " , "+ c+ " )");


    graficaAux = new Circulo(n,null,posx,posy,c,r);

    System.out.println("nombre:  "+graficaAux.getNombre());



 :}
                | GRAFICAR CUADRADO LPAREN NOMBRE:n COMA expre:posx COMA expre:posy COMA expre:l COMA color:c RPAREN 
                {:  reporteFigura.put("CUADRADO", reporteFigura.get("CUADRADO") +1);
                    System.out.println(" graficar cuadrado ( "+ n +", "+ posx +" , "+ posy +" , "+ l + " , "+ c+ " )");
                  :}
                | GRAFICAR RECTANGULO LPAREN NOMBRE:n COMA expre:posx COMA expre:posy COMA expre:a COMA expre:al COMA color:c RPAREN
                {: reporteFigura.put("RECTANGULO", reporteFigura.get("RECTANGULO") +1);
                   System.out.println(" graficar rectangulo ( "+ n +", "+ posx +" , "+ posy +" , "+ a+" , "+ al + " , "+ c+" )"); 

                 :}
                | GRAFICAR LINEA LPAREN NOMBRE:n COMA expre:posx COMA expre:posy COMA expre:posx2 COMA expre:posy2 COMA color:c RPAREN
                {: reporteFigura.put("LINEA", reporteFigura.get("LINEA") +1);
                   System.out.println(" graficar linea ( "+ n +", "+ posx +" , "+ posy +" , "+" , "+ posx2+" , "+ posy2+ " , "+ c+ " )");

                 :}
                | GRAFICAR POLIGONO LPAREN NOMBRE:n COMA expre:posx COMA expre:posy COMA expre:cl COMA expre:l COMA expre:h COMA color:c RPAREN
                {:  reporteFigura.put("POLIGONO", reporteFigura.get("POLIGONO") +1); 
                    System.out.println(" graficar circulo ( "+ n +", "+ posx +" , "+ posy +" , "+ cl + " , "+ l+" , "+h+" , "+ c +" )");
                 :}
                 | ANIMAR OBJETO_ANTERIOR LPAREN tipo_animacion:ta COMA expre:dx COMA expre:dy COMA expre:or RPAREN
                 {: System.out.println(ta);:};

color ::= AZUL:az {: reporteColor.put("AZUL", reporteColor.get("AZUL") + 1);  RESULT = az; :}
        | ROJO:ro {: reporteColor.put("ROJO", reporteColor.get("ROJO") + 1); RESULT = ro; :}
        | AMARILLO:am {: reporteColor.put("AMARILLO", reporteColor.get("AMARILLO") + 1); RESULT = am; :}
        | VERDE {: reporteColor.put("VERDE", reporteColor.get("VERDE") + 1); RESULT = "verde"; :}
        | MORADO {: reporteColor.put("MORADO", reporteColor.get("MORADO") + 1); RESULT = "morado"; :}
        | NEGRO {: reporteColor.put("NEGRO", reporteColor.get("NEGRO") + 1); RESULT = "negro"; :}
        | CELESTE {: reporteColor.put("CELESTE", reporteColor.get("CELESTE") + 1); RESULT = "celeste"; :}
        | LILA {: reporteColor.put("LILA", reporteColor.get("LILA") + 1); RESULT = "lila"; :}
        | GRIS {: reporteColor.put("GRIS", reporteColor.get("GRIS") + 1); RESULT = "gris"; :};

tipo_animacion::= CURVA {:RESULT="curva";:}
                | LINEA {:RESULT="linea";:};

// Operaciones matemáticas
expre ::= expre:e1 PLUS term:e2
            {: 
               // Reporte de suma
               String operacion = e1 + " + " + e2;
               reporteOperaciones.add(operacion);
               RESULT = e1 + e2 ; 
            :}
            | expre:e1 MINUS term:e2
            {: 
               // Reporte de resta
               String operacion = e1 + " - " + e2;
               reporteOperaciones.add(operacion);
               RESULT =e1 - e2 ; 
            :}
            | term:e
            {: RESULT =  e ; :};

term ::= term:t TIMES factor:f
       {: 
           // Reporte de multiplicación
           String operacion = t + " * " + f;
           reporteOperaciones.add(operacion);
           RESULT =t * f ; 
       :}
       | term:t DIVIDE factor:f
       {: 
           // Reporte de división
           String operacion = t + " / " + f;
           reporteOperaciones.add(operacion);
           RESULT = t / f ; 
       :}
       | factor:f
       {: RESULT = f; :};

factor ::= LPAREN expre:e RPAREN
         {: RESULT = e; :}
         | NUMERO:n
         {: RESULT = n; :};
